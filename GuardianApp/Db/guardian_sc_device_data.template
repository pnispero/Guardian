#=================================================================#
# Template file: guardian_nc_device_data.template
# Database for device data values within sxrss for the guardian
# And for stored data values
# Exactly the same as sc except the asyn parameter has "_SC" instead of "_NC"
# Uses guardian_device_data.substitutions
# Macro description:                                                   #
#   - NAME       : Name                                                #
#   - DESC       : Description                                         #
#   - ID         : ASYN ID                                             #
#=====================================================================


# ex: FBCK:FB02:GN01:S1DES_GUARD_ACT
# This records purpose is to copy data from device data pvs, and push to ASYN PV
record(ao, "$(NAME)_GUARD_ACT") { # actual
    field(DESC, "$(DESC)")
    field(PINI, "YES")
    field(EGU, "$(EGU)")
    field(PREC, "$(PREC)")
    field(DTYP, "asynFloat64")
	field(OMSL, "closed_loop") 
    field(DOL, "$(NAME) CPP")
    field(OUT, "@asyn(GUARDIAN, $(ID), 0)CURRENT_SC") 
}

# ex: FBCK:FB02:GN01:S1DES_GUARD_ACT_RBV
record(ai, "$(NAME)_GUARD_ACT_RBV") {
    field(DESC, "$(DESC)")    
    field(EGU, "$(EGU)")
    field(PREC, "$(PREC)")
    field(DTYP, "asynFloat64")
    field(SCAN, "I/O Intr")
    field(INP, "@asyn(GUARDIAN, $(ID), 0)CURRENT_SC")
}

# ex: FBCK:FB02:GN01:S1DES_STORED
record(ao, "$(NAME)_GUARD_LATCHED") {
    field(DESC, "$(DESC)")
    field(PINI, "YES")
    field(EGU, "$(EGU)")
    field(PREC, "$(PREC)")
    field(DTYP, "asynFloat64")
    field(OUT, "@asyn(GUARDIAN, $(ID), 0)STORED_SC")
}

record(ai, "$(NAME)_GUARD_LATCHED_RBV") {
    field(DESC, "$(DESC)")
    field(SCAN, "Passive")
    field(EGU, "$(EGU)")
    field(PREC, "$(PREC)")
    field(DTYP, "asynFloat64")
    field(INP, "@asyn(GUARDIAN, $(ID), 0)STORED_SC")
}

# How about making a bo record for each device, with a DOL to the SS_UPDATE
# and a FLNK to the device_GUARD_LATCH
record(bo, "$(NAME)_GUARD_LATCHED_TRG") {
    field(ZNAM, "Done")
    field(ONAM, "Update")
    field(OMSL, "closed_loop") 
    field(DOL, "$(BASE):GUARD_SS_UPDATE CPP")
    field(FLNK, "$(NAME)_GUARD_LATCHED_RBV")
}

# Trip Message
record(waveform, "$(NAME)_GUARD_TRIP_MSG") {
    field(DESC, "Trip message for GUI")
    field(PINI, "YES")
    field(NELM, "100")
    field(FTVL, "CHAR")
    field(DTYP, "asynOctetWrite")
    field(INP, "@asyn(GUARDIAN, $(ID), 0)MSG_SC")
}

# Trip logic type
record(longout, "$(NAME)_GUARD_LOGIC_TYPE") {
    field(DESC, "Trip tolerance logic type")
    field(PINI, "YES")
    field(VAL, "$(LOGIC_TYPE)")
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(GUARDIAN, $(ID), 0)LOGIC_TYPE_SC")
}

# Tolerance control pv
record(longout, "$(NAME)_GUARD_TOL_ID") {
    field(DESC, "Optional Tolerance pv id for logic")
    field(PINI, "YES")
    field(VAL, "$(TOLERANCE_ID)")
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(GUARDIAN, $(ID), 0)TOLERANCE_ID_SC")
}

# Optional Condition ID
record(longout, "$(NAME)_GUARD_CONDITION_ID") {
    field(DESC, "Optional condition id for logic")
    field(PINI, "YES")
    field(VAL, "$(CONDITION_ID)")
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(GUARDIAN, $(ID), 0)CONDITION_ID_SC")
}