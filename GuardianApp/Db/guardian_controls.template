#=================================================================#
# Template file: guardian_controls.template
# Database for controlling main thread within sxrss for the guardian
# Macro description:                                                             #
#   - BASE       : SIOC name                                                #
#=====================================================================

record(bo, "$(BASE):GUARD_MODE") {
    # END PV Name: SIOC:MCC0:MP00:GUARD_MODE
    # can do base with appended GUARD or not
    field(DESC, "Determines what devices to monitor")
    field(SCAN, "Passive")
    field(DTYP, "asynUInt32Digital")
    field(VAL, "0")
    field(PINI, "YES")
    field(ZNAM, "Normal Conducting")
    field(ONAM, "Super Conducting")
    field(OUT, "@asynMask(GUARDIAN, 0, 1, 0)GUARDIAN_MODE")
}

# Record for triggering a snapshot
record(bo, "$(BASE):GUARD_SNAPSHOT_TRG_EN") {
    field(DESC, "Snaphot trigger")
    field(DTYP, "asynUInt32Digital")
    field(SCAN, "Passive")
    # field(VAL, "0")
    # field(PINI, "YES")
    field(ZNAM, "Not Triggered")
    field(ONAM, "Triggered")
    field(OUT, "@asynMask(GUARDIAN, 0, 1, 0)SNAPSHOT_TRG")
    field(FLNK, "$(BASE):GUARD_SNAPSHOT_TS")
}

record(bi, "$(BASE):GUARD_SNAPSHOT_TRG_RBV") {
    field(DESC, "Snaphot trigger")
    field(DTYP, "asynUInt32Digital")
    field(SCAN, "I/O Intr")
    field(PINI, "NO")
    field(ZNAM, "Not Triggered")
    field(ONAM, "Triggered")
    field(INP, "@asynMask(GUARDIAN, 0, 1, 0)SNAPSHOT_TRG")
}

record(stringin, "$(BASE):GUARD_SNAPSHOT_TS") {
    field(DESC, "time stamp")
    field(DTYP, "Soft Timestamp")
    field(INP, "@%m/%d/%Y %H:%M:%S")
    info(autosaveFields, "VAL")
}

# Record for resetting a snapshot
record(bo, "$(BASE):GUARD_SNAPSHOT_RESET_EN") {
    field(DESC, "Snaphot Reset")
    field(DTYP, "asynUInt32Digital")
    field(SCAN, "Passive")
    field(ZNAM, "Not Triggered")
    field(ONAM, "Triggered")
    field(OUT, "@asynMask(GUARDIAN, 0, 1, 0)SNAPSHOT_RESET")
    field(FLNK, "$(BASE):GUARD_SNAPSHOT_TS")
}

record(bi, "$(BASE):GUARD_SNAPSHOT_RESET_RBV") {
    field(DESC, "Snaphot Reset")
    field(DTYP, "asynUInt32Digital")
    field(SCAN, "I/O Intr")
    field(PINI, "NO")
    field(ZNAM, "Not Triggered")
    field(ONAM, "Triggered")
    field(INP, "@asynMask(GUARDIAN, 0, 1, 0)SNAPSHOT_RESET")
}

# Record for controlling the 'sleep' of the FELpulseMonitor thread
record(ao, "$(BASE):GUARD_MONITOR_CYCLE_TIME") {
    field(DESC, "Sets the sleep of the monitor thread")
    field(PINI, "YES")
    field(VAL, "2700") # Update this field if needed
    field(EGU, "us")
    field(DTYP, "asynFloat64")
    field(SCAN, "Passive")
    field(OUT, "@asyn(GUARDIAN, 0, 0)MONITOR_CYCLE_TIME")
}

record(ai, "$(BASE):GUARD_MONITOR_CYCLE_TIME_RBV") {
    field(DESC, "Sets the sleep of the monitor thread")
    field(EGU, "us")
    field(DTYP, "asynFloat64")
    field(SCAN, "I/O Intr")
    field(INP, "@asyn(GUARDIAN, 0, 0)MONITOR_CYCLE_TIME")
}

# Record for 'arming' the guardian (i.e. guardian is actively monitoring)
record(bo, "$(BASE):GUARD_ARM") {
    field(DESC, "Arm enable for guardian")
    field(DTYP, "asynUInt32Digital")
    field(SCAN, "Passive")
    field(VAL, "0")
    field(PINI, "YES")
    field(ZNAM, "Not armed, not monitoring")
    field(ONAM, "Armed, monitoring")
    field(OUT, "@asynMask(GUARDIAN, 0, 1, 0)ARM")
}

record(bi, "$(BASE):GUARD_SS_UPDATE") {
    field(DESC, "Trigger device stored record processing")
    field(DTYP, "asynUInt32Digital")
    field(ZNAM, "Done")
    field(ONAM, "Update")
    field(SCAN, "I/O Intr")
    field(INP, "@asynMask(GUARDIAN, 0, 1, 0)SS_UPDATE")
}

record(waveform, "$(BASE):GUARD_DISPLAY_MSG") {
    field(DESC, "Display trip msg for GUI")
    field(NELM, "100")
    field(FTVL, "CHAR")
    field(DTYP, "asynOctetRead")
    field(SCAN, "I/O Intr")
    field(INP, "@asyn(GUARDIAN, 0, 0)DISPLAY_MSG")
}

record(longin, "$(BASE):GUARD_TRIP_ID") {
    field(DESC, "Tripped device index")
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP, "@asyn(GUARDIAN, 0, 0)TRIP_ID")
}
