#=================================================================#
# Template file: guardian_device_data.template
# Database for device data values within sxrss for the guardian
# And for stored data values
# Uses guardian_device_data.substitutions
# Macro description:                                                   #
#   - NAME       : Name                                                #
#   - DESC       : Description                                         #
#   - ID         : ASYN ID                                             #
#=====================================================================


# ex: FBCK:FB02:GN01:S1DES_CURRENT
# This records purpose is to copy data from device data pvs, and push to ASYN PV
record(ao, "$(NAME):CURRENT") { 
    field(DESC, "$(DESC)")
    field(PINI, "YES")
    field(EGU, "$(EGU)")
    field(PREC, "$(PREC)")
    field(DTYP, "asynFloat64")
	field(OMSL, "closed_loop") 
    field(DOL, "$(NAME)_TEST CPP")  # TODO: Temporarily set as test
    field(OUT, "@asyn(GUARDIAN, $(ID), 0)CURRENT") 
    # info(autosaveFields, "VAL PREC DESC EGU HOPR LOPR SEVR HIHI HIGH LOW LOLO HHSV HSV LSV LLSV")
}

# ex: FBCK:FB02:GN01:S1DES_CURRENT_RBV
record(ai, "$(NAME):CURRENT_RBV") {
    field(DESC, "$(DESC)")    
    field(EGU, "$(EGU)")
    field(PREC, "$(PREC)")
    field(DTYP, "asynFloat64")
    field(SCAN, "I/O Intr")
    field(INP, "@asyn(GUARDIAN, $(ID), 0)CURRENT")
    # info(autosaveFields, "VAL PREC DESC EGU HOPR LOPR SEVR HIHI HIGH LOW LOLO HHSV HSV LSV LLSV")
}

# ex: FBCK:FB02:GN01:S1DES_STORED
record(ai, "$(NAME):STORED") {
    field(DESC, "$(DESC)")
    field(SCAN, "I/O Intr")
    field(EGU, "$(EGU)")
    field(PREC, "$(PREC)")
    field(DTYP, "asynFloat64")
    field(INP, "@asyn(GUARDIAN, $(ID), 0)STORED")
    # info(autosaveFields, "VAL PREC DESC EGU HOPR LOPR SEVR HIHI HIGH LOW LOLO HHSV HSV LSV LLSV")
}

# Trip Message
# create asyn parameter for string in code (asynParamOctet?)
record(stringout, "$(NAME):MSG") {
    field(DESC, "Trip message for GUI")
    field(PINI, "YES")
    field(VAL, "$(MSG)")
    field(DTYP, "asynOctetWrite")
    field(OUT, "@asyn(GUARDIAN, $(ID), 0)MSG")
    # info(autosaveFields, "VAL PREC DESC EGU HOPR LOPR SEVR HIHI HIGH LOW LOLO HHSV HSV LSV LLSV")
}

# Trip logic type
record(longout, "$(NAME):LOGIC_TYPE") {
    field(DESC, "Trip tolerance logic type")
    field(PINI, "YES")
    field(VAL, "$(LOGIC_TYPE)")
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(GUARDIAN, $(ID), 0)LOGIC_TYPE")
    # info(autosaveFields, "VAL PREC DESC EGU HOPR LOPR SEVR HIHI HIGH LOW LOLO HHSV HSV LSV LLSV")
}

# Tolerance control pv
record(longout, "$(NAME):TOL_ID") {
    field(DESC, "Optional Tolerance pv id for logic")
    field(PINI, "YES")
    field(VAL, "$(TOLERANCE_ID)")
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(GUARDIAN, $(ID), 0)TOLERANCE_ID")
    # info(autosaveFields, "VAL PREC DESC EGU HOPR LOPR SEVR HIHI HIGH LOW LOLO HHSV HSV LSV LLSV")
}

# Optional Condition ID
record(longout, "$(NAME):CONDITION_ID") {
    field(DESC, "Optional condition id for logic")
    field(PINI, "YES")
    field(VAL, "$(CONDITION_ID)")
    field(DTYP, "asynInt32")
    field(OUT, "@asyn(GUARDIAN, $(ID), 0)CONDITION_ID")
    # info(autosaveFields, "VAL PREC DESC EGU HOPR LOPR SEVR HIHI HIGH LOW LOLO HHSV HSV LSV LLSV")
}