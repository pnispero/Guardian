% Trip logic analysis */

% Types of logic: 5
% Goal: We can make these into their own functions

% Part 1 - Counting types with no overlaps */
% The count for each type is in the ().
% note - no overlapping, a piece of logic/comparison has to be one of the types
% or it is a special case
% It isn't in order of type (i moved them around after counting)
% next to the type is a small description of what the code looks like its doing
% These types occur more than once, logic that appears only once (special cases) are not listed here

% Type 1 (10): Check tolerance percentage
% Ex:
    tols = stats.BC1_Etols * 0.01;
    qq = stats.BC1_energy_state;
    QQ = stored.BC1_energy_setpt;
    if qq > (tols*QQ + QQ) || qq < (QQ - tols*QQ)
        trip = 1;
        out.message = 'BC1 energy feedback state outside stored range';
    end

% Type 2 (2): Check tolerance percentage of absolute values
% Ex:
    tols = stats.L1Sphasetols * 0.01;
    qq = abs(stats.L1S_phase_setpt);
    QQ = abs(stored.L1S_phase_setpt);
    if qq > (tols*QQ + QQ) || qq < (QQ - tols*QQ)
        trip = 1;
        out.message = 'L1S phase setpoint has been changed. Check FEL pulse energy.';
        return
    end

% Type 3 (3): Check tolerance of absolute values
% Ex:
    tols = stats.BC2_verntols; 
    qq = abs(stats.BC2_vernier);  
    QQ = abs(stored.BC2_vernier); 
    if qq > (tols + QQ) || qq < (QQ - tols)
        trip = 1;
        out.message = 'BC2 Vernier (SXR) has been changed. Check FEL pulse energy.';
        return
    end
    % if 5 > (1 + 7) || 5 < (7 - 1)
    % if 103 > (0.1 + 102) || 103 < (102 - 0.1) TRUE // Compare with type 4 using same values

% Type 4 (2): Check tolerance of percentage (prev degrees)
% Ex:
    tols = stats.LHwaveplatetols;
    qq = stats.LH1_waveplate;
    QQ = stored.LH1_waveplate;
    if abs(QQ - qq) > abs(tols*QQ)
        trip = 1;
        out.message = 'Waveplate (LH1) angle has been changed. Check FEL pulse energy';
        return
    end
    % actual data ex
    % if abs(102 - 103) > abs(0.1*102) FALSE
    % if abs(11014.4 - 11014.36) > abs(.02*11014.4)

% Type 5 (3): check data unchanged
% Ex:
    if stats.LH1_delay ~= stored.LH1_delay
        trip = 1;
        out.message = 'Laser Heater 1 delay has been changed. Check FEL pulse energy';
        return
    end

% Type quad type (26) same as type 4 (except tols is hardcoded 0.1%):
% Ex:
    for iquad = 1:26
        qq = stats.CQMQctrl(iquad);
        QQ = stored.CQMQctrl(iquad);
        tols = 0.001;
        if abs(QQ - qq) > abs(tols*QQ)
            trip = 1;
            out.CQMQtrip = 1; % this isnt used
            tweakedQuad = stats.CQMQpv(iquad);
            out.message = ['No tweaking the CQs or matching QUADs! I see you  ', char(tweakedQuad)];
        end
    end

% Special cases (10):
% Theyre all different

% PATRICK COMMENT: We can merge type 1 and 2
Can we merge type 3 and 4? Try to get some working data to compare
OR we can merge type 3 to 1?

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
% Proposal 1 (NO GOOD):
You can merge type 1,2,3 in just type 3 like this
% Ex:
    tols = stats.BC2_verntols; .01
    qq = stats.BC2_vernier; 5
    QQ = stored.BC2_vernier; 6
    if qq > (tols + QQ) || qq < (QQ - tols)
        trip = 1;
        out.message = 'BC2 Vernier (SXR) has been changed. Check FEL pulse energy.';
        return
    end
Type 3 wont work in this merge

Type 5 we can keep as is, or can put in type 1, just make
a tolerance pv for it and make it 0

Type 4 must be kept as is

Quad type can be part of type 1, just make a tolerance pv for it


% Proposal 2:
You can merge type 1, 2, 4, 5 into type 1.
- type 2 (absolute value) would not be the same result if the qq and QQ are opposite signs
    - so may have to make it a seperate type (will double check with archiever?)
- type 4 would work as is
- type 5 needs to add a tolerance pv for it and set its val to 0

Type 3 must be kept as is

Total: 2 types

% Proposal 3 (this is the safest way):

You can merge type 1, 5 into type 1 (tolerance percentage)

Type 2 must be kept as is (tolerance percentage absolute values)

Type 3 must be kept as is (tolerance raw value)

Type 4 must be kept as is (tolerance percentage absolute values)

Total: 4 types

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

% >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

% Part 2 - counting types with overlaps */
% The count for each type may count for a type in more than one.
% ex: there is a special case, but that case is type 1 & 2 combined with some additional logic
% Then that is accounted for in the count of type 1, 2, and special case

% Type 1 (14):
    tols = stats.BC1_Etols * 0.01;
    qq = stats.BC1_energy_state;
    QQ = stored.BC1_energy_setpt;
    if qq > (tols*QQ + QQ) || qq < (QQ - tols*QQ)
        trip = 1;
        out.message = 'BC1 energy feedback state outside stored range';
    end

% Type 2 (7):
    if stats.BC1_vernier ~= stored.BC1_vernier
        trip = 1;
        out.message = 'BC1 vernier setpoint has been changed. Not Allowed.';
        return
    end

% Type 3 (2):
    tols = stats.BC2_verntols;
    qq = abs(stats.BC2_vernier);
    QQ = abs(stored.BC2_vernier);
    if qq > (tols + QQ) || qq < (QQ - tols)
        trip = 1;
        out.message = 'BC2 Vernier (SXR) has been changed. Check FEL pulse energy.';
        return
    end

% Type 4 (10):
    tols = stats.LHwaveplatetols;
    qq = stats.LH1_waveplate;
    QQ = stored.LH1_waveplate;
    if abs(QQ - qq) > abs(tols*QQ)
        trip = 1;
        out.message = 'Waveplate (LH1) angle has been changed. Check FEL pulse energy';
        return
    end

% Type 5 quad type (26):
    for iquad = 1:26
        qq = stats.CQMQctrl(iquad);
        QQ = stored.CQMQctrl(iquad);
        tols = 0.001;
        if abs(QQ - qq) > abs(tols*QQ)
            trip = 1;
            out.CQMQtrip = 1;
            tweakedQuad = stats.CQMQpv(iquad);
            out.message = ['No tweaking the CQs or matching QUADs! I see you  ', char(tweakedQuad)];
        end
    end

% Special cases (10):
% Theyre all different
